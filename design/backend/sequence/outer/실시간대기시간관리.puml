@startuml 실시간대기시간관리
!theme mono

title 실시간 대기시간 관리 플로우

actor 사용자 as User
participant "모바일/웹\n앱" as Frontend
participant "API\nGateway" as Gateway
participant "Restaurant\nSearch Service" as RestaurantService
participant "Redis\nCache" as Cache
participant "이벤트 버스\n(Kafka)" as EventBus
participant "푸시 알림\nService" as PushService
participant "포인트\nService" as PointService

== 1. 실시간 대기시간 조회 (UFR-REST-030) ==

User -> Frontend: 주변 맛집 목록 요청\n(GPS 자동 위치 인식)
Frontend -> Gateway: GET /restaurants/nearby\n위치정보 포함
Gateway -> RestaurantService: 주변 맛집 조회 요청
RestaurantService -> Cache: 실시간 대기시간 조회\nKEY: waittime:restaurant:{id}

alt 캐시에 최신 데이터 존재 (5분 이내)
    Cache --> RestaurantService: 대기시간 정보 반환\n(신뢰도 점수 포함)
    RestaurantService --> Gateway: 맛집 목록 + 대기시간
    Gateway --> Frontend: 응답 전송
    Frontend --> User: 실시간 대기시간 표시\n(신뢰도 표시 포함)

else 캐시에 데이터 없음 또는 오래된 데이터
    RestaurantService -> EventBus: 대기시간 조회 이벤트 발행\nTopic: waittime.inquiry
    note over EventBus: 크라우드소싱 데이터 수집 트리거
    RestaurantService --> Gateway: 기본 맛집 목록 반환\n(대기시간: 추정중)
    Gateway --> Frontend: 응답 전송
    Frontend --> User: 맛집 목록 표시\n(대기시간 업데이트 예정)
end

== 2. 사용자 대기시간 정보 제공 (UFR-REST-050) ==

User -> Frontend: 특정 맛집 대기시간 제공\n버튼 클릭
Frontend -> User: 현재 위치 확인 요청\n(GPS 기반)
User -> Frontend: 위치 정보 승인
Frontend -> Gateway: POST /restaurants/{id}/waittime\n{location, waittime, accuracy}

Gateway -> RestaurantService: 대기시간 정보 등록
RestaurantService -> RestaurantService: GPS 위치 검증\n(맛집 반경 100m 내 확인)

alt 위치 검증 성공
    RestaurantService -> Cache: 기존 데이터와 비교 분석
    
    alt 신뢰도 검증 통과
        RestaurantService -> Cache: 대기시간 업데이트\n가중치 적용 평균값 계산
        RestaurantService -> EventBus: 대기시간 업데이트 이벤트\nTopic: waittime.updated
        RestaurantService -> PointService: 포인트 적립 요청\n(기여도에 따른 차등 지급)
        
        PointService --> RestaurantService: 포인트 적립 완료
        RestaurantService --> Gateway: 등록 성공 + 포인트 정보
        Gateway --> Frontend: 성공 응답
        Frontend --> User: "정보 제공 감사합니다!\n포인트 XX점 적립"
        
    else 신뢰도 검증 실패
        RestaurantService --> Gateway: 검증 실패 응답
        Gateway --> Frontend: 오류 응답
        Frontend --> User: "위치나 시간 정보를 다시 확인해주세요"
    end
    
else 위치 검증 실패
    RestaurantService --> Gateway: 위치 오류 응답
    Gateway --> Frontend: 오류 응답
    Frontend --> User: "맛집 근처에서만 정보 제공이 가능합니다"
end

== 3. 실시간 업데이트 및 알림 ==

EventBus -> PushService: 대기시간 업데이트 이벤트 수신
PushService -> PushService: 관심 맛집 등록한\n사용자 목록 조회
PushService -> Frontend: 실시간 푸시 알림 전송\n"관심 맛집의 대기시간이 업데이트되었습니다"
Frontend -> User: 알림 표시
User -> Frontend: 알림 클릭
Frontend -> Gateway: 최신 대기시간 조회
Gateway -> RestaurantService: 대기시간 정보 요청
RestaurantService -> Cache: 최신 대기시간 조회
Cache --> RestaurantService: 대기시간 정보
RestaurantService --> Gateway: 응답
Gateway --> Frontend: 최신 정보 전송
Frontend --> User: 최신 대기시간 표시

== 4. 크라우드소싱 데이터 검증 ==

EventBus -> RestaurantService: waittime.inquiry 이벤트 수신
RestaurantService -> RestaurantService: 주변 사용자에게\n대기시간 제공 요청 생성
RestaurantService -> PushService: 타겟팅 알림 요청\n(반경 1km 내 사용자)
PushService -> Frontend: "근처 맛집의 대기시간을 알려주세요" 알림
Frontend -> User: 알림 표시

alt 사용자가 정보 제공에 참여
    User -> Frontend: 대기시간 정보 입력
    Frontend -> Gateway: POST /restaurants/{id}/waittime
    note over Gateway: 위의 "사용자 대기시간 정보 제공" 플로우 실행
else 사용자가 참여하지 않음
    note over User: 알림 무시 또는 나중에 처리
end

== 5. 데이터 신뢰도 관리 ==

RestaurantService -> RestaurantService: 주기적 신뢰도 검증\n(매 10분)
RestaurantService -> Cache: 오래된 데이터 확인\n(30분 이상 업데이트 없음)
RestaurantService -> EventBus: 데이터 갱신 요청 이벤트
EventBus -> PushService: 크라우드소싱 요청 전송
PushService -> Frontend: 대상 사용자에게 알림

@enduml