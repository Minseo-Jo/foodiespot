@startuml 맛집검색및추천
!theme mono

title 맛집 검색 및 개인화 추천 플로우 - 외부 시퀀스

actor "사용자" as User
participant "모바일/웹 앱" as Frontend
participant "API Gateway" as Gateway
participant "Restaurant Search Service" as RestaurantService
participant "Personalization Service" as PersonalizationService
participant "Redis Cache" as Cache
participant "외부 지도 API" as MapAPI
database "Restaurant DB" as RestaurantDB
database "User Profile DB" as UserDB

== 1. 위치기반 식당 검색 (UFR-REST-010) ==

User -> Frontend: 현재 위치에서 맛집 검색\n(키워드: "한식", 반경: 1km)
activate Frontend

Frontend -> Gateway: GET /api/v1/restaurants/search\n?lat=37.5665&lng=126.9780&keyword=한식&radius=1km
activate Gateway

Gateway -> Gateway: JWT 토큰 검증 및 인증
Gateway -> RestaurantService: 위치기반 식당 검색 요청
activate RestaurantService

RestaurantService -> Cache: 검색 결과 캐시 조회\nkey: "search:37.5665:126.9780:한식:1km"
activate Cache
alt 캐시 히트
    Cache --> RestaurantService: 캐시된 검색 결과 반환
    note right: TTL 30분
else 캐시 미스
    Cache --> RestaurantService: 캐시 미스
    deactivate Cache
    
    RestaurantService -> MapAPI: 주변 식당 위치 정보 요청
    activate MapAPI
    MapAPI --> RestaurantService: 위치 정보 및 거리 계산 결과
    deactivate MapAPI
    
    RestaurantService -> RestaurantDB: 식당 정보 조회\n(카테고리, 평점, 기본 정보)
    activate RestaurantDB
    RestaurantDB --> RestaurantService: 식당 목록 데이터
    deactivate RestaurantDB
    
    RestaurantService -> Cache: 검색 결과 캐싱 (30분 TTL)
    activate Cache
    Cache --> RestaurantService: 캐싱 완료
    deactivate Cache
end

RestaurantService --> Gateway: 위치기반 식당 목록\n(거리순 정렬, 15개 결과)
deactivate RestaurantService
Gateway --> Frontend: 검색 결과 응답
deactivate Gateway
Frontend --> User: 주변 맛집 목록 표시\n(거리, 평점, 카테고리)
deactivate Frontend

== 2. 개인화 추천 받기 (UFR-REST-020) ==

User -> Frontend: 개인화 추천 요청
activate Frontend

Frontend -> Gateway: GET /api/v1/recommendations\n?lat=37.5665&lng=126.9780
activate Gateway

Gateway -> PersonalizationService: 개인화 추천 생성 요청\n(사용자ID, 위치정보)
activate PersonalizationService

PersonalizationService -> Cache: 사용자 프로필 캐시 조회\nkey: "user_profile:{userId}"
activate Cache
alt 프로필 캐시 존재
    Cache --> PersonalizationService: 캐시된 사용자 선호도 데이터
else 캐시 미스
    Cache --> PersonalizationService: 캐시 미스
    deactivate Cache
    
    PersonalizationService -> UserDB: 사용자 평가 이력 조회\n(최소 10회 평가 데이터 필요)
    activate UserDB
    UserDB --> PersonalizationService: 평가 이력 (25건)
    deactivate UserDB
    
    PersonalizationService -> PersonalizationService: 개인 가성비 기준 분석\n(가격:30%, 양:25%, 맛:35%, 서비스:10%)
    
    PersonalizationService -> Cache: 사용자 프로필 캐싱 (6시간 TTL)
    activate Cache
    Cache --> PersonalizationService: 캐싱 완료
    deactivate Cache
end

PersonalizationService -> Cache: 맞춤 추천 결과 조회\nkey: "recommendations:{userId}:{location}"
activate Cache
alt 추천 캐시 존재
    Cache --> PersonalizationService: 캐시된 추천 결과
else 캐시 미스  
    Cache --> PersonalizationService: 캐시 미스
    deactivate Cache
    
    PersonalizationService -> RestaurantService: 주변 식당 정보 요청 (동기)
    activate RestaurantService
    RestaurantService --> PersonalizationService: 주변 식당 목록 및 상세정보
    deactivate RestaurantService
    
    PersonalizationService -> PersonalizationService: AI 모델 기반 개인화 점수 계산\n- 개인 가중치 적용\n- 과거 선호 패턴 반영\n- 예상 만족도 예측
    
    PersonalizationService -> Cache: 추천 결과 캐싱 (15분 TTL)
    activate Cache
    Cache --> PersonalizationService: 캐싱 완료
    deactivate Cache
end

PersonalizationService --> Gateway: 개인화 추천 결과\n(5개 식당, 추천 이유, 예상 가성비)
deactivate PersonalizationService
Gateway --> Frontend: 맞춤 추천 응답
deactivate Gateway
Frontend --> User: 개인화 추천 목록 표시\n("양이 많아서 추천", "맛 평점 높음")
deactivate Frontend

== 3. 식당 상세 정보 조회 (UFR-REST-040) ==

User -> Frontend: 관심 식당 선택 및 상세정보 요청
activate Frontend

Frontend -> Gateway: GET /api/v1/restaurants/{restaurantId}
activate Gateway

Gateway -> RestaurantService: 식당 상세 정보 조회
activate RestaurantService

RestaurantService -> Cache: 식당 상세정보 캐시 조회\nkey: "restaurant_detail:{restaurantId}"
activate Cache
alt 상세정보 캐시 존재
    Cache --> RestaurantService: 캐시된 상세정보
else 캐시 미스
    Cache --> RestaurantService: 캐시 미스
    deactivate Cache
    
    RestaurantService -> RestaurantDB: 식당 기본정보, 메뉴, 리뷰 조회
    activate RestaurantDB
    RestaurantDB --> RestaurantService: 상세정보 (주소, 전화번호, 영업시간, 평점)
    deactivate RestaurantDB
    
    RestaurantService -> Cache: 상세정보 캐싱 (1시간 TTL)
    activate Cache
    Cache --> RestaurantService: 캐싱 완료
    deactivate Cache
end

RestaurantService -> Cache: 실시간 대기시간 조회\nkey: "waiting_time:{restaurantId}"
activate Cache
Cache --> RestaurantService: 최신 대기시간 정보\n(30분 이내 업데이트)
deactivate Cache

RestaurantService -> PersonalizationService: 개인별 가성비 예측 요청 (비동기)
activate PersonalizationService
PersonalizationService -> PersonalizationService: 개인 취향 기반 예상 만족도 계산
PersonalizationService --> RestaurantService: 예상 가성비 점수 (85점)
deactivate PersonalizationService

RestaurantService --> Gateway: 식당 상세정보 응답\n(기본정보 + 실시간 대기시간 + 개인 예상 가성비)
deactivate RestaurantService
Gateway --> Frontend: 상세정보 데이터
deactivate Gateway
Frontend --> User: 식당 상세화면 표시\n- 기본정보 (주소, 전화, 영업시간)\n- 현재 대기시간: 15분\n- 개인 예상 가성비: 85점\n- 최근 리뷰 5개
deactivate Frontend

== 4. 검색 결과 정렬 및 필터링 ==

note over User, UserDB
사용자는 검색 결과를 다양한 기준으로 정렬/필터링 가능
- 거리순/평점순/가성비순
- 가격대 필터 (1만원 이하, 1-2만원, 2만원 이상)  
- 대기시간 필터 (즉시 입장, 30분 이내)
- 카테고리 필터 (한식, 중식, 일식 등)

모든 필터링은 캐시된 데이터를 활용하여 빠른 응답 제공
필터 조건 변경 시 새로운 캐시 키로 결과 저장
end note

@enduml